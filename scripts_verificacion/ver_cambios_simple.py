#!/usr/bin/env python3
"""
Script simple para ver qu√© agendas cambiaron despu√©s de una modificaci√≥n.
Compara el backup m√°s reciente con el archivo actual.
"""

import pandas as pd
import os
import glob
from datetime import datetime

def main():
    # Cambiar al directorio de datos
    script_dir = os.path.dirname(os.path.abspath(__file__))
    directorio_procesado = os.path.join(script_dir, '..', 'datos', 'csv_procesado')
    directorio_backup = os.path.join(script_dir, '..', 'datos', 'backup')
    
    # Buscar √∫ltimo backup en la carpeta backup
    archivos_backup = glob.glob(os.path.join(directorio_backup, 'agendas_consolidadas_backup_*.xlsx'))
    if not archivos_backup:
        print("‚ùå No se encontraron archivos de backup en datos/backup/")
        return
    
    archivos_backup.sort(reverse=True)
    archivo_backup = archivos_backup[0]
    archivo_actual = os.path.join(directorio_procesado, 'agendas_consolidadas.xlsx')
    
    if not os.path.exists(archivo_actual):
        print("‚ùå No se encontr√≥ agendas_consolidadas.xlsx")
        return
    
    print(f"üîç Comparando:")
    print(f"   Backup: {os.path.basename(archivo_backup)}")
    print(f"   Actual: agendas_consolidadas.xlsx")
    print()
    
    try:
        df_antes = pd.read_excel(archivo_backup)
        df_despues = pd.read_excel(archivo_actual)
    except Exception as e:
        print(f"‚ùå Error cargando archivos: {e}")
        return
    
    print(f"üìä Registros antes: {len(df_antes)}")
    print(f"üìä Registros despu√©s: {len(df_despues)}")
    print()
    
    def normalizar_valor(valor):
        """Normaliza valores nan, NaN, None a string vac√≠o para comparaci√≥n consistente"""
        if pd.isna(valor) or valor is None or str(valor).lower() == 'nan':
            return ''
        return str(valor).strip()
    
    # Crear diccionarios de registros para comparar FILA POR FILA - TODOS LOS CAMPOS
    # Usar √≠ndice de fila como clave √∫nica para garantizar comparaci√≥n fila por fila
    registros_antes = {}
    for idx, row in df_antes.iterrows():
        # Usar siempre el √≠ndice de fila para identificar cada fila √∫nica
        key = f'fila_{idx}'
        registros_antes[key] = {
            'nombre_original_agenda': normalizar_valor(row.get('nombre_original_agenda', '')),
            'doctor': normalizar_valor(row.get('doctor', '')),
            'area': normalizar_valor(row.get('area', '')),
            'tipo_turno': normalizar_valor(row.get('tipo_turno', '')),
            'dia': normalizar_valor(row.get('dia', '')),
            'hora_inicio': normalizar_valor(row.get('hora_inicio', '')),
            'hora_fin': normalizar_valor(row.get('hora_fin', '')),
            'efector': normalizar_valor(row.get('efector', '')),
            'ventanilla': normalizar_valor(row.get('ventanilla', ''))
        }
    
    registros_despues = {}
    for idx, row in df_despues.iterrows():
        # Usar siempre el √≠ndice de fila para identificar cada fila √∫nica
        key = f'fila_{idx}'
        registros_despues[key] = {
            'nombre_original_agenda': normalizar_valor(row.get('nombre_original_agenda', '')),
            'doctor': normalizar_valor(row.get('doctor', '')),
            'area': normalizar_valor(row.get('area', '')),
            'tipo_turno': normalizar_valor(row.get('tipo_turno', '')),
            'dia': normalizar_valor(row.get('dia', '')),
            'hora_inicio': normalizar_valor(row.get('hora_inicio', '')),
            'hora_fin': normalizar_valor(row.get('hora_fin', '')),
            'efector': normalizar_valor(row.get('efector', '')),
            'ventanilla': normalizar_valor(row.get('ventanilla', ''))
        }
    
    # Buscar cambios en TODOS LOS CAMPOS comparando fila por fila
    cambios_encontrados = []
    for fila_key in registros_antes:
        if fila_key in registros_despues:
            antes = registros_antes[fila_key]
            despues = registros_despues[fila_key]
            
            cambios_fila = []
            # Comparar todos los campos incluyendo nombre_original_agenda
            campos_a_comparar = [
                ('nombre_original_agenda', 'Nombre agenda'),
                ('doctor', 'Doctor'),
                ('area', '√Årea'),
                ('tipo_turno', 'Tipo de turno'),
                ('dia', 'D√≠a'),
                ('hora_inicio', 'Hora inicio'),
                ('hora_fin', 'Hora fin'),
                ('efector', 'Efector'),
                ('ventanilla', 'Ventanilla')
            ]
            
            for campo_key, campo_nombre in campos_a_comparar:
                if antes[campo_key] != despues[campo_key]:
                    # Filtrar cambios triviales (nan ‚Üî '' o '' ‚Üî '')
                    if not (antes[campo_key] == '' and despues[campo_key] == ''):
                        cambios_fila.append(f"{campo_nombre}: '{antes[campo_key]}' ‚Üí '{despues[campo_key]}'")
            
            if cambios_fila:
                cambios_encontrados.append({
                    'fila': fila_key,
                    'agenda': despues['nombre_original_agenda'],  # Mostrar el nombre de la agenda
                    'cambios': cambios_fila
                })
    
    # Generar reporte en archivo txt en la carpeta backup
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    archivo_reporte = os.path.join(directorio_backup, f"reporte_cambios_{timestamp}.txt")
    
    with open(archivo_reporte, 'w', encoding='utf-8') as f:
        f.write("REPORTE DE CAMBIOS EN AGENDAS\n")
        f.write("=" * 50 + "\n\n")
        f.write(f"Fecha del reporte: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Archivo backup: {os.path.basename(archivo_backup)}\n")
        f.write(f"Archivo actual: agendas_consolidadas.xlsx\n\n")
        f.write(f"Registros antes: {len(df_antes)}\n")
        f.write(f"Registros despu√©s: {len(df_despues)}\n\n")
        
        if cambios_encontrados:
            f.write(f"RESUMEN: Se encontraron {len(cambios_encontrados)} filas con cambios\n\n")
            
            # Resumen por tipo de cambio - TODOS LOS CAMPOS incluye ahora nombre_original_agenda
            cambios_nombre = sum(1 for c in cambios_encontrados if any('Nombre agenda:' in cambio for cambio in c['cambios']))
            cambios_doctor = sum(1 for c in cambios_encontrados if any('Doctor:' in cambio for cambio in c['cambios']))
            cambios_area = sum(1 for c in cambios_encontrados if any('√Årea:' in cambio for cambio in c['cambios']))
            cambios_tipo = sum(1 for c in cambios_encontrados if any('Tipo de turno:' in cambio for cambio in c['cambios']))
            cambios_dia = sum(1 for c in cambios_encontrados if any('D√≠a:' in cambio for cambio in c['cambios']))
            cambios_hora_inicio = sum(1 for c in cambios_encontrados if any('Hora inicio:' in cambio for cambio in c['cambios']))
            cambios_hora_fin = sum(1 for c in cambios_encontrados if any('Hora fin:' in cambio for cambio in c['cambios']))
            cambios_efector = sum(1 for c in cambios_encontrados if any('Efector:' in cambio for cambio in c['cambios']))
            cambios_ventanilla = sum(1 for c in cambios_encontrados if any('Ventanilla:' in cambio for cambio in c['cambios']))
            
            f.write("TIPOS DE CAMBIOS:\n")
            f.write(f"‚Ä¢ Nombre agenda: {cambios_nombre} filas\n")
            f.write(f"‚Ä¢ Doctor: {cambios_doctor} filas\n")
            f.write(f"‚Ä¢ √Årea: {cambios_area} filas\n") 
            f.write(f"‚Ä¢ Tipo de turno: {cambios_tipo} filas\n")
            f.write(f"‚Ä¢ D√≠a: {cambios_dia} filas\n")
            f.write(f"‚Ä¢ Hora inicio: {cambios_hora_inicio} filas\n")
            f.write(f"‚Ä¢ Hora fin: {cambios_hora_fin} filas\n")
            f.write(f"‚Ä¢ Efector: {cambios_efector} filas\n")
            f.write(f"‚Ä¢ Ventanilla: {cambios_ventanilla} filas\n\n")
            
            f.write("DETALLE DE CAMBIOS:\n")
            f.write("-" * 30 + "\n\n")
            
            for i, cambio in enumerate(cambios_encontrados):
                f.write(f"{i+1}. {cambio['agenda']} ({cambio['fila']})\n")
                for detalle in cambio['cambios']:
                    f.write(f"   ‚îî‚îÄ {detalle}\n")
                f.write("\n")
        else:
            f.write("RESULTADO: No se detectaron cambios en las filas\n")
    
    print(f"üìÑ Reporte generado: {os.path.basename(archivo_reporte)}")
    print(f"üìÇ Ubicaci√≥n: datos/backup/")
    if cambios_encontrados:
        print(f"üîÑ Se encontraron {len(cambios_encontrados)} filas con cambios")
    else:
        print("‚úÖ No se detectaron cambios en las filas")

if __name__ == "__main__":
    main()
